// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Sistema de Condomínio
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(RESIDENT)
  status        UserStatus @default(ACTIVE)
  
  // Relacionamentos NextAuth
  accounts Account[]
  sessions Session[]
  
  // Relacionamentos do sistema
  condominiumId String?
  condominium   Condominium? @relation(fields: [condominiumId], references: [id])
  
  apartmentId   String?
  apartment     Apartment? @relation(fields: [apartmentId], references: [id])
  
  // Atividades do usuário
  reservations  Reservation[]
  tickets       Ticket[]
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Condominium {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  email       String?
  cnpj        String?
  
  // Relacionamentos
  users       User[]
  blocks      Block[]
  apartments  Apartment[]
  commonAreas CommonArea[]
  posts       Post[]
  tickets     Ticket[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("condominiums")
}

model Block {
  id            String   @id @default(cuid())
  name          String
  description   String?
  
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  
  apartments    Apartment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blocks")
}

model Apartment {
  id          String   @id @default(cuid())
  number      String
  floor       Int?
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  
  blockId       String?
  block         Block? @relation(fields: [blockId], references: [id])
  
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  
  // Relacionamentos
  residents     User[]
  reservations  Reservation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("apartments")
}

model CommonArea {
  id            String   @id @default(cuid())
  name          String
  description   String?
  capacity      Int?
  hourlyRate    Float?
  
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  
  reservations  Reservation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("common_areas")
}

model Reservation {
  id          String   @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  status      ReservationStatus @default(PENDING)
  notes       String?
  totalAmount Float?
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  apartmentId String?
  apartment   Apartment? @relation(fields: [apartmentId], references: [id])
  
  commonAreaId String?
  commonArea   CommonArea? @relation(fields: [commonAreaId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reservations")
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    String?
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  published   Boolean  @default(false)
  
  authorId    String
  author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  condominiumId String
  condominium   Condominium @relation(fields: [condominiumId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Comment {
  id      String @id @default(cuid())
  content String
  
  authorId String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  postId  String
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Notification {
  id      String @id @default(cuid())
  title   String
  message String
  read    Boolean @default(false)
  type    NotificationType @default(INFO)
  
  userId  String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  RESIDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}
